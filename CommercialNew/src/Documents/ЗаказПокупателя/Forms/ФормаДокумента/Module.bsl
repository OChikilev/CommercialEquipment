
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
		
		//{{ Используем ОбщиеМодули: ДЗ_РаботаСФормами
	// Создаем группу скидка.  
	//Добавляем: Поле согласованная скидка и Кнопку пересчитать	
	ДЗ_РаботаСФормами.СоздатьГруппуСкидка(Элементы.ГруппаШапкаЛево, Элементы);	
	НаполнитьГруппуЭлементами();
	//}} 
		
	//Если ЗначениеЗаполнено(Параметры.ДополнительнаяОбработкаСсылка) Тогда
	//	 ЗранилищеНастроек = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.ДополнительнаяОбработкаСсылка,
	//	 "ХранилишеНастроек");		
	//КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
    // СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
    // СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
    ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	РассчитатьСуммуСтроки(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	РассчитатьСуммуСтроки(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	РассчитатьСуммуДокумента();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУслуги

&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	РассчитатьСуммуСтроки(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	РассчитатьСуммуСтроки(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриИзменении(Элемент)
	РассчитатьСуммуДокумента();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//{{Дополнение
&НаСервере
Процедура НаполнитьГруппуЭлементами()
	 
	//{{Поле согласованная скидка
	ПолеВвода = Элементы.Вставить("ДЗ_СогласованнаяСкидка", Тип("ПолеФормы"),Элементы.ГруппаСкидка);
	ПолеВвода.ПутьКДанным = "Объект.ДЗ_СогласованнаяСкидка";
	//@skip-check bsl-legacy-check-string-literal
	ПолеВвода.УстановитьДействие("ПриИзменении", "ВопросПользователю");
	ПолеВвода.Вид =ВидПоляФормы.ПолеВвода;
	ПолеВвода.Заголовок = "СогласованнаяСкидка";
	//Поле согласованная скидка}}
	
	//{{Кнопка пересчитать
	////Создаем кнопку пересчитать
	КнопкаПересчитать = Команды.Добавить("Пересчитать");
	КнопкаПересчитать.Заголовок = "Пересчитать";
	КнопкаПересчитать.Действие = "ДЗ_ПересчитатьПосле";
	////Создали кнопку пересчитать
	КнопкаКоманды = Элементы.Вставить("КнопкаПересчитать", Тип("КнопкаФормы"),Элементы.ГруппаСкидка);
	КнопкаКоманды.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
	КнопкаКоманды.ИмяКоманды = "Пересчитать";
	КнопкаКоманды.Заголовок = "Пересчитать";
	//Кнопка пересчитать}}
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ВопросПользователю()
	
	// {{Проверить заполнение таблиц
	//  Если необходимо задать пользователю вопрос и пересчеть Товары и Услуги	
	Если ЗначениеЗаполнено(Объект.Товары) Или ЗначениеЗаполнено(Объект.Услуги) Тогда
		
		ОтветПользователя = Ждать ВопросАсинх("Пересчитать табличный документ?", РежимДиалогаВопрос.ДаНет, 15);
		
		Если ОтветПользователя = КодВозвратаДиалога.Да Тогда		
			ПересчитатьТоварыИУслуги()	
		Иначе		
			ОбщегоНазначенияКлиент.СообщитьПользователю("Пересчет отменен");
			Возврат;		
		КонецЕсли;
		
	КонецЕсли;	
	//}}
КонецПроцедуры 

&НаКлиенте
Процедура РассчитатьСумму(Строки)
	
	// Процедура по Рассчету суммы документа по всем строкам
	Если ЗначениеЗаполнено(Строки) Тогда		
		Для Каждого Строка Из Строки Цикл	
			РассчитатьСуммуСтроки(Строка);
		КонецЦикла;		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьТоварыИУслуги()
	
	Если ЗначениеЗаполнено(Объект.Товары) Или ЗначениеЗаполнено(Объект.Услуги) Тогда
		Товары = Объект.Товары;	
		РассчитатьСумму(Товары);	
		Услуги = Объект.Услуги;	
		РассчитатьСумму(Услуги);	
	КонецЕсли;
	
КонецПроцедуры	
//}} 

&НаКлиенте
Процедура РассчитатьСуммуСтроки(ТекущиеДанные)
	
	//{{ Сумма пересчитывается с учетом Объект.ДЗ_СогласованнаяСкидка
	//ТекущиеДанные.Сумма = ТекущиеДанные.Цена * ТекущиеДанные.Количество;
	//}}
	
	ТекущиеДанные.Сумма = 
	ТекущиеДанные.Количество * (ТекущиеДанные.Цена - ТекущиеДанные.Цена * Объект.ДЗ_СогласованнаяСкидка / 100);
	
	РассчитатьСуммуДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуДокумента()
	
	Объект.СуммаДокумента = Объект.Товары.Итог("Сумма") + Объект.Услуги.Итог("Сумма");
	
КонецПроцедуры

#Область ПодключаемыеКоманды

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#КонецОбласти
